[core]
  editor = nvim
  excludesfile = ~/.gitignore_global
  pager = bat
[pull]
  rebase = true
[rebase]
  autoStash = true

[alias]
  commit-do-not-push = "!f() { git add .; git commit -m 'DO NOT PUSH' ; }; f"

  push-force-with-lease  = "!f() { git push --force-with-lease $@ ; }; f"

  l = "!f() { git log --graph --pretty=format:'%C(bold cyan)%h%Creset%C(bold magenta)%d%Creset %C(bold green)<%ae>%Creset %C(bold red)(%cd)%Creset %s' $@ ; }; f"  # show author name but commit date
  le = "!f() { git log --pretty=format:'%C(bold cyan)%h%Creset%C(bold magenta)%d%Creset %C(bold green)<%ae>%Creset %C(bold red)(%cd)%Creset %s' $@ ; }; f"  # show author name but commit date

  lauthor-and-committer = "!f() { git log --graph --pretty=format:'%C(bold cyan)%h%Creset%C(bold magenta)%d%Creset %C(bold green)<a:%ae | c:%ce>%Creset %C(bold red)(a:%ad |  c:%cd)%Creset %s' $@ ; }; f"

  find-commit-contains-string = "!f() { git le --reverse --source -S "'$1'" ; }; f"
  find-commit-contains-regex = "!f() { git le --reverse --source -G "'$1'" ; }; f"
  find-commits-changed-file-w-patches = "!f() { git l -p -- "$1"; }; f"
  find-commits-changed-file = "!f() { git l --follow -- "$1" ; }; f"
  find-commit-introduced-file = "!f() { git l --follow --diff-filter=A "$1" ; }; f"

  files-in-commit = "!f() { [ -z "$@" ] && set -- HEAD;git diff-tree --no-commit-id --name-only -r $@; }; f"


  ;change committer email
  ;
  ;taken from https://github.com/brauliobo/gitconfig/blob/master/configs/.gitconfig
  ;change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "
  ;; forcefully
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch -f --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "

  # taken from https://github.com/nedbat/dot/blob/master/.gitconfig
  #
  # Get a plain-text diff, for making patches.
  patch = "!f() { git --no-pager diff --no-color $@; }; f"

  # taken from https://github.com/nedbat/dot/blob/master/.gitconfig
  #
  # Show branches, verbosely, sorted by last touch, with commit messages.
  brv = "!f() { git branch --sort=-creatordate --color=always --format='%(color:reset)%(creatordate:short) %(color:bold white)%(align:2,right)%(upstream:trackshort)%(end)%(color:nobold) %(align:40,left)%(color:yellow)%(refname:short)%(end) %(color:reset)%(contents:subject)'; }; f"

  update = "!f() { git checkout master; git pull --prune; git checkout -; }; f"

  delete-gone-branches = "!f() {   for branch in $(git branch -vv | grep gone | sed -r 's#\\s+##;s#^\\*##' | cut -d ' ' -f1); do echo \"Deleting $branch\";  git branch -d \"$branch\"; done }; f"

  resubmit-base = "!f() { last_arg=\"${@:$#}\"; set -- \"${@:1:$(($#-1))}\"; [ -z "$1" ] && git add . || git add $@; branch_name=\"$(git branch | grep '*' | head -n 1 | cut -d ' ' -f2)\"; branch_origin=\"$(git branch -r | grep \"$branch_name\" | head -n1 | cut -d '/' -f1 | sed 's#\\s*##' )\"; git push -u \"$branch_origin\" \"$branch_name\" \"$last_arg\"; }; f"
  resubmit = "!f() { git resubmit-base $@ --force-with-lease; }; f"
  resubmit-force = "!f() { git resubmit-base $@ --force; }; f"

  af-helm-weirdness = "!f() { ~/Documents/scripts/af-helm-weirdness.sh $@; }; f"

  delete-all-git-branches-except-master = "!f() { [ -n \"$1\" ] && delete=D || delete=d; git for-each-ref --shell --format='git log --oneline %(refname) ^origin/master'   refs/heads/ | sed \"s#.*refs/heads/##;s#' .*##\" | grep -v master | xargs git branch -\"$delete\"; }; f"

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[color]
	ui = auto
