[core]
	editor = nvim
	excludesfile = ~/.gitignore_global
	pager = less -R
	attributesfile=~/.gitattributes_global
[fetch]
	prune = true
[pull]
	rebase = true
[rebase]
	autoStash = true
	# same as --rebase-merges (and its deprecated predecessor --preserve-merges)
	rebaseMerges = true

[alias]
	get-branch = rev-parse --abbrev-ref HEAD

	get-org-and-repo = "!f() { git remote get-url origin | sed 's#.git$##'| tr ':' '/' | python -c '_stdin=input(); split=_stdin.rsplit(\"/\",2); print(\"/\".join(split[1:]))'  ; }; f"

	# snatched from https://github.com/ttaylorr/dotfiles/blob/work-gh/bin/git-curl & extended
	#
	# how to use:
	# $ git visually-compare
	# https://cc-github.bmwgroup.net/diepfote/scripts/compare/origin/master...HEAD
	#
	# $ git visually-compare -c
	# https://cc-github.bmwgroup.net/diepfote/scripts/compare/077a1f0e025036d1ae409c82d9957bf05b319846...
	#
	# $ git visually-compare test-test master
	# https://cc-github.bmwgroup.net/diepfote/scripts/compare/test-test...master
	#
	# $ git visually-compare -c test-test master
	# https://cc-github.bmwgroup.net/diepfote/scripts/compare/d3d8a85888a9b773943d34ec389593735a495cfc...077a1f0e025036d1ae409c82d9957bf05b319846
	#
	# $ git visually-compare --commit-ids test-test master
	# https://cc-github.bmwgroup.net/diepfote/scripts/compare/d3d8a85888a9b773943d34ec389593735a495cfc...077a1f0e025036d1ae409c82d9957bf05b319846
	#
	visually-compare = "!f() { : git log ; \
		if [ $# -lt 1 ]; then set -- origin/master HEAD; fi; \
		if [ "$1" = '--commit-ids' ] || [ "$1" = '-c' ]; then \
			convert_to_commits=true; \
			shift; \
		fi; \
		\
		if [ -n \"$convert_to_commits\" ]; then \
		git show -s --format='%H' \"$@\" | tr '\n' ' ' | awk '{ print \"https://'\"$GITHUB_INSTANCE\"'/'\"$(git get-org-and-repo)\"'/compare/\" $1 \"...\" $2 }' ; \
		else \
			echo https://\"$GITHUB_INSTANCE\"/\"$(git get-org-and-repo)\"/compare/\"$1\"...\"$2\"; \
		fi; \
	}; f"

	clone-aur-repo = "!f() { : git log ; \
	 git clone -q  https://aur.archlinux.org/"$@"; \
	}; f"

	lmessages = "!f() { : git log ; git log --graph --pretty=format:'%s' \"$@\" ; }; f"  # show author name but commit date
	l = le --graph
	le = "!f() { : git log ; git log --date=auto:human --pretty=format:'%C(bold cyan)%h%Creset%C(bold magenta)%d%Creset %C(bold green)<%aN>%Creset (%GK) %C(bold red)(%cd)%Creset %s' \"$@\" ; }; f"	# show author name but commit date

	lauthor-and-committer = leauthor-and-committer --graph
	leauthor-and-committer = "!f() { : git log ; git log --pretty=format:'%C(bold cyan)%h%Creset%C(bold magenta)%d%Creset %C(bold green)<a:%aE | c:%cE>%Creset (%GK) %C(bold red)(a:%ad |  c:%cd)%Creset %s' \"$@\" ; }; f"

	find-commit-contains-string = "!f() { git le --reverse --source -S \"$@\" ; }; f"
	reflog-find-commit-contains-string = "!f() { git reflog --source -S \"$@\" ; }; f"
	find-commit-contains-regex = "!f() { git le --reverse --source -G \"$@\" ; }; f"
	reflog-find-commit-contains-regex = "!f() { git reflog --source -G \"$@\" ; }; f"

	# use --show-pulls to show merge commits (which PR introduced the change?)
	# use --follow if you want to follow beyond renames
	find-commits-changed-file = "!f() { : git add ; filename=\"${*:$#:$#}\"; set -- \"${@:1:$(($#-1))}\"; git l \"$@\" -- \"${GIT_PREFIX:-.}\"/\"$filename\"; }; f"
	reflog-find-commits-changed-file = "!f() { : git add ; filename=\"${*:$#:$#}\"; set -- \"${@:1:$(($#-1))}\"; git reflog \"$@\" -- \"${GIT_PREFIX:-.}\"/\"$filename\"; }; f"
	find-commit-introduced-file = "!f() { : git add ; filename=\"${*:$#:$#}\"; set -- \"${@:1:$(($#-1))}\";  git l --follow --diff-filter=A \"$@\" -- \"${GIT_PREFIX:-.}\"/\"$filename\" ; }; f"
	reflog-find-commit-introduced-file = "!f() { : git add ; filename=\"${*:$#:$#}\"; set -- \"${@:1:$(($#-1))}\";  git reflog --follow --diff-filter=A \"$@\" -- \"${GIT_PREFIX:-.}\"/\"$filename\" ; }; f"

	# taken from https://github.com/nedbat/dot/blob/master/.gitconfig
	#
	# Get a plain-text diff, for making patches.
	patch = "!f() { : git diff ; git --no-pager diff --no-color \"$@\"; }; f"

	# taken from https://github.com/nedbat/dot/blob/master/.gitconfig
	#
	# Show branches, verbosely, sorted by last touch, with commit messages.
	list-branches-by-last-touch = "!f() { git branch --sort=-committerdate --color=always --format='%(color:reset)%(committerdate:short) %(color:green)%(objectname:short)%(color:reset) %(align:40,left)%(color:yellow)%(refname:short)%(color:reset)%(end) %(contents:subject)' "$@"; }; f"
	# nicked from https://stackoverflow.com/questions/15606955/how-can-i-make-git-show-a-list-of-the-files-that-are-being-tracked/15606995#15606995
	list-all-files-ever-tracked = "!f() { git log --pretty=format: --name-only | sed '/^$/d' | sort | uniq; }; f"
	ls-all-files-ever-tracked = list-all-files-ever-tracked
	reflog-list-all-files-ever-tracked = "!f() { git log --pretty=format: --name-only | sed '/^$/d' | sort | uniq; }; f"
	reflog-ls-all-files-ever-tracked = "!f() { git reflog --pretty=format: --name-only | sed '/^$/d' | sort | uniq; }; f"

	# switches to master, pulls latest changes, switches back to previous branch;
	# if it cannot switch to master, it will only fetch master;
	# then run `git gc` if certain thresholds are met
	update = "!f() { \
		set -x; \
		fetch_or_pull () { \
			if git checkout master; then \
				git branch --set-upstream-to=origin/master master; \
				git pull --prune; \
				git checkout -; \
			else \
				git fetch origin master; \
			fi; \
		}; \
		fetch_or_pull; \
		git delete-gone-branches; \
		git maintenance run --auto; set +x; }; f"

	delete-gone-branches = "!f() {	 for branch in $(git branch -vv | grep gone | sed -r 's#\\s+##;s#^\\*##' | cut -d ' ' -f1); do echo \"Deleting $branch\"; [ -n \"$1\" ] && delete=D || delete=d; git branch -\"$delete\" \"$branch\"; done }; f"

	redo = "!f() { \
		last_arg=\"${@:$#}\"; \
		[[ \"$last_arg\" =~ git_prefix ]] && \
		GIT_PREFIX=\"$(echo \"$last_arg\" | sed 's#.*=##')/\" && \
		set -- \"${@:1:$(($#-1))}\"; \
		\
		add_given() { \
			for file in \"$@\"; do \
			set -x; \
			git add \"$GIT_PREFIX$file\"; \
			set +x; \
			done; \
		}; \
		\
		[ -z \"$1\" ] && git add \"$GIT_PREFIX\". || add_given \"$@\" ; \
		git commit --amend --no-edit; }; f"


	resubmit-base = "!f() { \
		last_arg=\"${@:$#}\"; \
		git_prefix=\"${@:$#-1:1}\"; \
		set -- \"${@:1:$(($#-2))}\"; \
		git redo \"$@\" \"git_prefix=$git_prefix\"; \
		\
		branch_name=\"$(git branch --no-color | grep '*' | head -n 1 | cut -d ' ' -f2)\"; \
		branch_origin=\"$(git branch --no-color -r | grep \"$branch_name\" | head -n1 | cut -d '/' -f1 | sed 's#\\s*##' )\"; \
		\
		git push -u \"$branch_origin\" \"$branch_name\" \"$last_arg\";	}; f"

	resubmit = "!f() { : git add ; git resubmit-base \"$@\" \"${GIT_PREFIX:-.}\" --force-with-lease; }; f"
	resubmit-force = "!f() { : git add ; git resubmit-base \"$@\" \"${GIT_PREFIX:-.}\" --force; }; f"

	delete-all-git-branches-except-master-release-main = "!f() { [ -n \"$1\" ] && delete=D || delete=d; git for-each-ref --shell --format='git log --oneline %(refname) ^origin/master'	 refs/heads/ | sed \"s#.*refs/heads/##;s#' .*##\" | grep -vE '^(master|release|main)$' | xargs git branch -\"$delete\"; }; f"

	# heads up
	# this saves all stashed and tracked files
	start-fresh = "!f() { git staash; git checkout master; git pull -p; git checkout -b \"$1\"; }; f"

	get-upstream = "!f() { git update; set -x; git rebase master; set +x; }; f"

	# -i for ignore-case
	# --grep= can be applied multiple-times --> will be ORed;
	#		if it should be ANDed --> --all-match
	# usage examples:
	# - $ git log-grep -i -- 'service_annotations' charts
	#		+ git log -i --grep=service_annotations --grep=charts
	# - $ git log-grep -- 'service_annotations' charts
	#		+ git log --grep=service_annotations --grep=charts
	# - $ git log-grep --all-match -i -- 'service_annotations' charts
	#		+ git log --all-match -i --grep=service_annotations --grep=charts
	log-grep = "!f() { \
		\
		positional_args=(); \
		while [ $# -gt 0 ]; do \
		key="$1"; \
			case "$key" in \
				*) \
				if [ "$1" = '--' ]; then \
					shift; \
					break; \
				else \
					positional_args+=("$1"); \
					shift; \
				fi \
				;; \
			esac \
		done; \
		\
		command=('git' 'l' "${positional_args[@]}"); \
		for search_param in "$@"; do \
			command+=("--grep=$search_param"); \
		done; \
		\
		set -x; \
		"${command[@]}"; \
	}; f"

	# usage example
	# $ git content-grep -E -- 'abc|def|some'
	content-grep = "!f() { \
		set -x; \
		git rev-list --all | xargs git grep \"$@\"; \
	}; f"

	not-modified = "!f() { : git add ; filename=\"${*:$#:$#}\"; set -- \"${@:1:$(($#-1))}\"; git diff-index --quiet  HEAD -- \"${GIT_PREFIX:-.}\"/\"$filename\"; }; f"

	s = status -sb
	pl = pull
	p = push
	pf = push --force-with-lease
	pF = push --force

	d = diff

	dc = diff --cached

	dw = diff --word-diff
	dw = diff --word-diff

	dn = diff --no-index
	dnw = diff --no-index --word-diff

	c = checkout
	ch = checkout

	co = commit

	br = list-branches-by-last-touch
	b  = br

	; --------------------------------
	; nicked from https://dzone.com/articles/lesser-known-git-commands
	;
	; stash only unstaged changes to tracked files
	stsh = stash --keep-index
	;
	; stash -> stash any changes to tracked files
	;
	; stash untracked and tracked files
	staash = stash --include-untracked
	;
	; stash ignored, untracked, and tracked files
	staaash = stash --all
	; --------------------------------

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[color]
	ui = auto
	branch = auto
	diff = auto
	diffFilter = delta --color-only
	interactive = auto
	status = auto
	log = auto
[delta]
	navigate = true
	light = true
	side-by-side = true
[credential]
	helper = store
[diff "sopsdiffer"]
	textconv = sops -d
[safe]
	directory = /etc
	directory = /etc/systemd/system
	directory = /etc/pacman.d/hooks
[merge]
	conflictStyle = zdiff3
[url "https://"]
	# snatched from https://stackoverflow.com/a/55502818
	# never use the git:// protocol
	# $ git config --global url.https://.insteadOf git://
	insteadOf = git://
