[core]
  editor = nvim
  excludesfile = ~/.gitignore_global
  pager = less -k ~/.less -R
  attributesfile=~/.gitattributes_global
[pull]
  rebase = true
[rebase]
  autoStash = true

[alias]
  commit-do-not-push = "!f() { git add .; git commit -m 'DO NOT PUSH' ; }; f"

  push-force-with-lease  = "!f() { git push --force-with-lease $@ ; }; f"

  l = "!f() { git log --graph --pretty=format:'%C(bold cyan)%h%Creset%C(bold magenta)%d%Creset %C(bold green)<%ae>%Creset %C(bold red)(%cd)%Creset %s' $@ ; }; f"  # show author name but commit date
  le = "!f() { git log --pretty=format:'%C(bold cyan)%h%Creset%C(bold magenta)%d%Creset %C(bold green)<%ae>%Creset %C(bold red)(%cd)%Creset %s' $@ ; }; f"  # show author name but commit date | no ascii art/graph

  lauthor-and-committer = "!f() { git log --graph --pretty=format:'%C(bold cyan)%h%Creset%C(bold magenta)%d%Creset %C(bold green)<a:%ae | c:%ce>%Creset %C(bold red)(a:%ad |  c:%cd)%Creset %s' $@ ; }; f"

  find-commit-contains-string = "!f() { git le --reverse --source -S $@ ; }; f"
  find-commit-contains-regex = "!f() { git le --reverse --source -G $@ ; }; f"
  find-commits-changed-file-w-patches = "!f() { git l -p -- "$1"; }; f"
  find-commits-changed-file = "!f() { git l --follow -- "$1" ; }; f"
  find-commit-introduced-file = "!f() { git l --follow --diff-filter=A "$1" ; }; f"


  ;change committer email
  ;
  ; nicked from https://github.com/brauliobo/gitconfig/blob/master/configs/.gitconfig
  ;
  ; usage: git change-commits GIT_COMMITTER_EMAIL "old email" "new email" or
  ;        git change-commits GIT_AUTHOR_EMAIL "old email" "new email"
  ;
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch -f --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "

  # taken from https://github.com/nedbat/dot/blob/master/.gitconfig
  #
  # Get a plain-text diff, for making patches.
  patch = "!f() { git --no-pager diff --no-color $@; }; f"

  # taken from https://github.com/nedbat/dot/blob/master/.gitconfig
  #
  # Show branches, verbosely, sorted by last touch, with commit messages.
  brv = "!f() { git branch --sort=-creatordate --color=always --format='%(color:reset)%(creatordate:short) %(color:bold white)%(align:2,right)%(upstream:trackshort)%(end)%(color:nobold) %(align:40,left)%(color:yellow)%(refname:short)%(end) %(color:reset)%(contents:subject)'; }; f"
  # nicked from https://stackoverflow.com/questions/15606955/how-can-i-make-git-show-a-list-of-the-files-that-are-being-tracked/15606995#15606995
  list-all-files-ever-existed= "!f() { git log --pretty=format: --name-only --diff-filter=A | sort - | sed '/^$/d'; }; f"

  update = "!f() { set -x; git checkout master; git pull --prune; git checkout -; set +x; }; f"

  delete-gone-branches = "!f() {   for branch in $(git branch -vv | grep gone | sed -r 's#\\s+##;s#^\\*##' | cut -d ' ' -f1); do echo \"Deleting $branch\"; [ -n \"$1\" ] && delete=D || delete=d; git branch -\"$delete\" \"$branch\"; done }; f"

  redo = "!f() { last_arg=\"${@:$#}\"; [[ \"$last_arg\" =~ git_prefix ]] && GIT_PREFIX=\"$(echo \"$last_arg\" | sed 's#.*=##')/\" && set -- \"${@:1:$(($#-1))}\";  add_given() { for file in $@; do  set -x;  git add \"$GIT_PREFIX$file\"; set +x;  done; }; [ -z \"$1\" ] && git add . || add_given $@ ; git commit --amend --no-edit; }; f"
  resubmit-base = "!f() { last_arg=\"${@:$#}\"; git_prefix=\"${@:$#-1:1}\"; set -- \"${@:1:$(($#-2))}\"; git redo $@ \"git_prefix=$git_prefix\"; \
    branch_name=\"$(git branch | grep '*' | head -n 1 | cut -d ' ' -f2)\"; \
    branch_origin=\"$(git branch -r | grep \"$branch_name\" | head -n1 | cut -d '/' -f1 | sed 's#\\s*##' )\"; \
    git push -u \"$branch_origin\" \"$branch_name\" \"$last_arg\";  }; f"
  resubmit = "!f() { git resubmit-base $@ \"${GIT_PREFIX:-.}\" --force-with-lease; }; f"
  resubmit-force = "!f() { git resubmit-base $@ \"${GIT_PREFIX:-.}\" --force; }; f"

  af-helm-weirdness = "!f() { ~/Documents/scripts/af-helm-weirdness.sh $@; }; f"

  delete-all-git-branches-except-master = "!f() { [ -n \"$1\" ] && delete=D || delete=d; git for-each-ref --shell --format='git log --oneline %(refname) ^origin/master'   refs/heads/ | sed \"s#.*refs/heads/##;s#' .*##\" | grep -v master | xargs git branch -\"$delete\"; }; f"

  # heads up
  # this saves all stashed and tracked files
  start-fresh = "!f() { git staash; git checkout master; git pull -p; git checkout -b \"$1\"; }; f"

  get-upstream = "!f() { git update; set -x; git rebase master; set +x; }; f"

	; --------------------------------
  ; nicked from https://dzone.com/articles/lesser-known-git-commands
  ;
  ; stash only unstaged changes to tracked files
	stsh = stash --keep-index
  ;
  ; stash -> stash any changes to tracked files
  ;
  ; stash untracked and tracked files
	staash = stash --include-untracked
  ;
  ; stash ignored, untracked, and tracked files
	staaash = stash --all
	; --------------------------------

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[color]
	ui = auto
