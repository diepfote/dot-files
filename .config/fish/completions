
# ---------
# complete dictd
set command "(dict --help | tail -n +8 | tr -s ' ' | cut -d ' ' -f2)"
#set description "dict --help | tail -n +8 | tr -s ' ' | sed -r 's#[a-zA-Z-]+ [A-Za-z<>-]+ ##' | sed -r 's#<.*>##' | sed 's#^ ##'"

  # -f --> no file completion
  #
complete -f -c dict -a $command
# ---------


# ---------
# pass extensions

[ (uname) = Darwin ] && \
  set file /usr/local/share/fish/vendor_completions.d/pass.fish ||
  set file /usr/share/fish/vendor_completions.d/pass.fish

source "$file"
complete -c pass -f -A -n '__fish_pass_uses_command update' -a "(__fish_pass_print_entry_dirs)"

# ---------


# ---------
# password files
set command '(for file in (ls ~/Documents/passwds/); basename "$file"; end)'

  # -f --> no file completion
  #
complete -f -c pass_find -a $command
complete -f -c view_pass_file -a $command
complete -f -c view-pass-files -a $command
complete -f -c rm_pass_files -a $command
complete -f -c mv_pass_file -a $command
# ---------


# ---------
# complete for functions
set command '(for file in (ls ~/.config/fish/functions); basename "$file"; end)'

  # -f --> no file completion
  #
complete -f -c new-function -a $command
complete -f -c edit-function -a $command
complete -f -c mv-function -a $command
complete -f -c cp-function -a $command
complete -f -c rm-function -a $command
complete -f -c checkout-function -a $command
# ---------


# ---------
# complete for scripts
set command '(find ~/Documents/scripts/ -path "**/.git" -prune -o -print | sed "s#.*Documents/scripts/##")'

  # -f --> no file completion
  #
complete -f -c new-script -a $command
complete -f -c edit-script -a $command
complete -f -c mv-script -a $command
complete -f -c cp-script -a $command
complete -f -c rm-script -a $command
complete -f -c checkout-script -a $command
# ---------

# ---------
# complete for python
set command '(find ~/Documents/python/ -path "**/.git" -prune -o -print | sed "s#.*Documents/python/##")'

  # -f --> no file completion
  #
complete -f -c new-python -a $command
complete -f -c edit-python -a $command
complete -f -c mv-python -a $command
complete -f -c cp-python -a $command
complete -f -c rm-python -a $command
complete -f -c checkout-python -a $command
# ---------


# ---------
# complete for cheatsheets
set command '(find ~/Documents/cheatsheets/ -path "**/.git" -prune -o -print | sed "s#.*Documents/cheatsheets/##")'

  # -f --> no file completion
  #
complete -f -c cheat -a $command
# ---------

# ---------
# complete for book
set command '(find ~/Documents/books\&documentation/ -path "**/.git" -prune -o -print | sed "s#.*Documents/books&documentation/##")'

  # -f --> no file completion
  #
complete -f -c book -a $command
# ---------


# ---------
# complete for view_dirs
set command '(find ~/Documents -maxdepth 3 -path "**/.git" -prune -o -print 2>/dev/null | sed "s#.*Documents/##")'

  # -f --> no file completion
  #
complete -f -c view_dirs -a $command
# ---------


# ---------
# append_syscall
set command '(for file in (ls /etc/firejail); basename "$file"; end)'

  # -f --> no file completion
  #
complete -f -c append_syscall -a $command
# ---------

# ---------
# PKGBUILD AUR completion
set command '(yay -Qqm)'

complete -f -c pkgbuild_for_pkg -a $command
complete -f -c pkgbuild_for_pkgv -a $command

set command '(yay -Qqn)'
complete -f -c downgrade -a $command

# ---------



# ---------
# Mac native applications
set command '(ls /Applications/)'

  # -f --> no file completion
  #
complete -f -c open_mac-os_app -a $command
# ---------

