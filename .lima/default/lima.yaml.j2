# ===================================================================== #
# BASIC CONFIGURATION
# ===================================================================== #

# Arch: "default", "x86_64", "aarch64".
# "default" corresponds to the host architecture.
arch: "x86_64"

# An image must support systemd and cloud-init.
# Ubuntu and Fedora are known to work.
# Default: none (must be specified)
images:
# Try to use yyyyMMdd.REV image if available. Note that yyyyMMdd.REV will be removed after several months.
- location: "https://geo.mirror.pkgbuild.com/images/v20231215.200192/Arch-Linux-x86_64-cloudimg-20231215.200192.qcow2"
  arch: "x86_64"
  digest: "sha256:1238a4daadcbc168e6f33a0c3210d4add0b80dce1dd5d86c7c7ead2dfce9d48d"

# CPUs: if you see performance issues, try limiting cpus to 1.
# Default: 4
cpus: 4

# Memory size
# Default: "4GiB"
memory: "1GiB"

# Disk size
# Default: "100GiB"
disk: "50GiB"

# Expose host directories to the guest, the mount point might be accessible from all UIDs in the guest
# Default: none
mounts:
  - location: "~/Documents"
    # CAUTION: `writable` SHOULD be false for the home directory.
    # Setting `writable` to true is possible, but untested and dangerous.
    writable: true
  - location: "~/Desktop"
    writable: true
  - location: "~/Movies"
    writable: true
  - location: "~/Music"
    writable: true
  - location: "~/.not_host_env"
    writable: true
  - location: "~/.config"
    writable: false
  - location: "~/.cache/rizin"
    writable: true
  - location: "~/.cache/radare2"
    writable: true
  - location: "~/.vim"
    writable: true
  - location: "~/.gnupg"
    writable: true
  # used in arch-all image build
  - location: "/var/cache/pkgfile"
    writable: true
  # used in arch-all image build
  - location: "/tmp/.X11-unix"
    writable: true
  - location: "/tmp/drc"
    writable: true
  - location: "/tmp/lima"
    writable: true
  - location: /opt/homebrew
    writable: false

mountType: "9p"


ssh:
  # A localhost port of the host. Forwarded to port 22 of the guest.
  # Currently, this port number has to be specified manually.
  # Default: none
  localPort: 60906
  # Load ~/.ssh/*.pub in addition to $LIMA_HOME/_config/user.pub .
  # This option is useful when you want to use other SSH-based
  # applications such as rsync with the Lima instance.
  # If you have an insecure key under ~/.ssh, do not use this option.
  # Default: true
  loadDotSSHPubKeys: true



# ===================================================================== #
# ADVANCED CONFIGURATION
# ===================================================================== #

containerd:
  # Enable system-wide (aka rootful)  containerd and its dependencies (BuildKit, Stargz Snapshotter)
  # Default: false
  system: false
  # Enable user-scoped (aka rootless) containerd and its dependencies
  # Default: true
  user: false

# Provisioning scripts need to be idempotent because they might be called
# multiple times, e.g. when the host VM is being restarted.
provision:
  - mode: user
    script: |
      #!/usr/bin/env bash
      set -x
      if ! test -e ~/Documents; then
        ln -s -f /Users/*/Documents ~/Documents
      fi
      if ! test -e ~/.not_host_env; then
        if timeout 10m bash -c "until command -v make >/dev/null 2>&1; do sleep 3; done"; then
          (export NOT_HOST_ENV=true; cd ~/Documents/dot-files && make)
        fi
      fi


#   # `system` is executed with the root privilege
  - mode: system
    script: |
      #!/usr/bin/env bash
      set -x

      pacman -Syu --noconfirm

      if ! command -v neovim >/dev/null 2>&1; then
        pacman --needed --noconfirm -S base-devel setconf sudo git man man-pages pkgfile vi neovim
      fi

      if ! test -f /usr/lib/cni/dnsname; then
        pacman -S --needed --noconfirm podman
        # docker-compose / podman-compose
        pacman -S --needed --noconfirm podman-compose

        # container name resolution for docker-compose / container name resolution for podman-compose
        #
        # docs:
        # - https://github.com/containers/podman-compose
        # - https://github.com/containers/dnsname
        # - https://github.com/containers/dnsname/blob/main/README_PODMAN.md
        # - https://github.com/containers/dnsname/blob/main/example/foobar.conflist
        #
        pacman -S --needed --noconfirm podman-dnsname

        # fix
        # ```
        # podman start -a 1-ha_haproxy_1
        # WARN[0000] aardvark-dns binary not found, container dns will not be enabled
        # ```
        pacman -S --needed --noconfirm aardvark-dns

        # fix unable to tail container logs
        setconf -u /usr/share/containers/containers.conf log_driver '"k8s-file"'

        # allow unqualified registries
        echo 'unqualified-search-registries=["docker.io", "quay.io"]'  > /etc/containers/registries.conf

        systemctl --user enable --now podman.socket
      fi

      if ! test -f /usr/bin/yay >/dev/null 2>&1; then
        if timeout 10m bash -c "until command -v git >/dev/null 2>&1; do sleep 3; done"; then
          # TODO potentially fix username
          (cd /tmp && sudo -u lima git clone https://aur.archlinux.org/yay.git)
          cd /tmp/yay
          sudo -u lima git pull
          sudo -u lima makepkg -sri --noconfirm
        fi
      fi


  - mode: system
    script: |
      #!/usr/bin/env bash
      set -x
      if timeout 10m bash -c "until command -v pkgfile >/dev/null 2>&1; do sleep 3; done"; then
        pkgfile -u
      fi

  - mode: system
    script: |
      #!/usr/bin/env bash
      set -x
      test -f /usr/local/bin/vim >/dev/null 2>&1 && exit 0
      ln -f -s /usr/bin/nvim /usr/local/bin/vim

  - mode: user
    script: |
      #!/usr/bin/env bash
      set -x

      # if `yay` command becomes available in the next 10 min,
      # run `yay` to install arbitrary packages and configure (neo)vim
      if timeout 10m bash -c "until command -v yay >/dev/null 2>&1; do sleep 3; done"; then
        # if pacman db is locked wait for 10 minutes for it do become available again.
        # if it does -> run yay install arbitrary packages
        if timeout 1m bash -c 'until ! test -f /var/lib/pacman/db.lck; do sleep 3; done'; then
          yay --needed --noconfirm -S {{ arch_pkgs }}
        fi
      fi


probes:
  - script: |
      #!/usr/bin/env bash
      if ! timeout 5m bash -c "until command -v podman >/dev/null 2>&1; do echo >&2 'podman is not installed yet'; sleep 3; done"; then
        exit 1
      fi

  - script: |
      #!/usr/bin/env bash
      if ! timeout 5m bash -c "until command -v yay >/dev/null 2>&1; do echo >&2 'yay is not installed yet'; sleep 3; done"; then
        exit 1
      fi

  - script: |
      #!/usr/bin/env bash
      if ! timeout 5m bash -c "until command -v r2 >/dev/null 2>&1; do echo >&2 'radare2 is not installed yet'; sleep 3; done"; then
        exit 1
      fi
    hint: See "/var/log/cloud-init-output.log". in the guest


# ===================================================================== #
# FURTHER ADVANCED CONFIGURATION
# ===================================================================== #

firmware:
  # Use legacy BIOS instead of UEFI.
  # Default: false
  legacyBIOS: true

video:
  # QEMU display, e.g., "none", "cocoa", "sdl".
  # As of QEMU v5.2, enabling this is known to have negative impact
  # on performance on macOS hosts: https://gitlab.com/qemu-project/qemu/-/issues/334
  # Default: "none"
  display: "none"


# Port forwarding rules. Forwarding between ports 22 and ssh.localPort cannot be overridden.
# Rules are checked sequentially until the first one matches.
# portForwards:
#   - guestPort: 443
#     hostIP: "0.0.0.0" # overrides the default value "127.0.0.1"; allows privileged port forwarding
#   # default: hostPort: 443 (same as guestPort)
#   # default: guestIP: "127.0.0.1" (also matches bind addresses "0.0.0.0", "::", and "::1")
#   # default: proto: "tcp" (only valid value right now)
#   - guestPortRange: [4000, 4999]
#     hostIP:  "0.0.0.0" # overrides the default value "127.0.0.1"
#   # default: hostPortRange: [4000, 4999] (must specify same number of ports as guestPortRange)
#   - guestPort: 80
#     hostPort: 8080 # overrides the default value 80
#   - guestIP: "127.0.0.2" # overrides the default value "127.0.0.1"
#     hostIP: "127.0.0.2" # overrides the default value "127.0.0.1"
#   # default: guestPortRange: [1024, 65535]
#   # default: hostPortRange: [1024, 65535]
#   - guestPort: 8888
#     ignore: true (don't forward this port)
#   # Lima internally appends this fallback rule at the end:
#   - guestIP: "127.0.0.1"
#     guestPortRange: [1024, 65535]
#     hostIP: "127.0.0.1"
#     hostPortRange: [1024, 65535]
#   # Any port still not matched by a rule will not be forwarded (ignored)

# Extra environment variables that will be loaded into the VM at start up.
# These variables are currently only consumed by internal init scripts, not by the user shell.
# This field is experimental and may change in a future release of Lima.
# https://github.com/lima-vm/lima/pull/200
# env:
#   KEY: value

# Explicitly set DNS addresses for qemu user-mode networking. By default qemu picks *one*
# nameserver from the host config and forwards all queries to this server. On macOS
# Lima adds the nameservers configured for the "en0" interface to the list. In case this
# still doesn't work (e.g. VPN setups), the servers can be specified here explicitly.
# If nameservers are specified here, then the "en0" configuration will be ignored.
# dns:
# - 1.1.1.1
# - 1.0.0.1

# ===================================================================== #
# END OF TEMPLATE
# ===================================================================== #
